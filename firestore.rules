rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.uid != null && 
             request.auth.token.email_verified == true;
    }
    
    function isSystemFunction() {
      // Allow Firebase Functions service account
      return request.auth.token.firebase.sign_in_provider == 'custom' &&
             request.auth.token.firebase.identities == {};
    }
    
    function hasValidBriefData() {
      return request.resource.data.keys().hasAll(['target', 'feed', 'brief', 'recommendation', 'reason', 'updatedAt']);
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId) && isValidUser();
      
      allow create: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidUser() &&
                      resource == null && // Document doesn't exist yet
                      request.resource.data.uid == request.auth.uid &&
                      request.resource.data.email == request.auth.token.email;
      
      allow update: if isOwner(userId) && 
                      isValidUser() &&
                      request.resource.data.uid == resource.data.uid && // Can't change uid
                      request.resource.data.email == resource.data.email; // Can't change email
    }
    
    // Market Briefs - Core collection for AI-analyzed market data
    // Public read access, Functions write access
    match /marketBriefs/{briefId} {
      allow read: if true; // Public read access for market briefs
      allow write: if isSystemFunction(); // Only Firebase Functions can write
      
      allow create: if isSystemFunction() && hasValidBriefData();
      allow update: if isSystemFunction() && hasValidBriefData();
      
      // History subcollection
      match /history/{timestamp} {
        allow read: if true; // Public read access to historical data
        allow write: if isSystemFunction(); // Only Firebase Functions can write history
      }
    }
    
    // User-specific market preferences and watchlists
    match /userPreferences/{userId} {
      allow read, write: if isOwner(userId) && isValidUser();
      
      allow create: if isAuthenticated() && 
                      isOwner(userId) && 
                      request.resource.data.userId == request.auth.uid;
    }
    
    // User portfolios - private to each user
    match /portfolios/{portfolioId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
    }
    
    // User transactions - private to each user
    match /transactions/{transactionId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.keys().hasAll(['userId', 'type', 'amount', 'timestamp']);
    }
    
    // User watchlists - private to each user
    match /watchlists/{watchlistId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
    }
    
    // User analysis requests and custom market analysis
    match /userAnalysis/{analysisId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
      
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid;
    }
    
    // Market news and feed data (public read, functions write)
    match /marketNews/{newsId} {
      allow read: if true; // Public read access
      allow write: if isSystemFunction(); // Only Firebase Functions can write
    }
    
    // Market data cache (public read, functions write)
    match /marketData/{dataId} {
      allow read: if true; // Public read access
      allow write: if isSystemFunction(); // Only Firebase Functions can update market data
    }
    
    // System configuration and targets
    match /systemConfig/{configId} {
      allow read: if isAuthenticated(); // Authenticated users can read config
      allow write: if isValidUser() && 
                     request.auth.token.admin == true; // Only admin can modify
    }
    
    // Application settings and metadata
    match /appSettings/{settingId} {
      allow read: if true; // Public read for app settings
      allow write: if isValidUser() && 
                     request.auth.token.admin == true; // Only admin can modify
    }
    
    // Notifications - private to each user
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
      
      allow create: if (isAuthenticated() && 
                        request.resource.data.userId == request.auth.uid) ||
                       isSystemFunction(); // Functions can create notifications
    }
    
    // User settings - private to each user
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId) && isValidUser();
    }
    
    // API usage tracking (functions only)
    match /apiUsage/{usageId} {
      allow read: if isValidUser() && 
                    request.auth.token.admin == true; // Admin can read usage
      allow write: if isSystemFunction(); // Only functions can write usage data
    }
    
    // Error logs (functions only)
    match /errorLogs/{logId} {
      allow read: if isValidUser() && 
                    request.auth.token.admin == true; // Admin can read errors
      allow write: if isSystemFunction(); // Only functions can log errors
    }
    
    // Default deny rule for any unmatched paths
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
